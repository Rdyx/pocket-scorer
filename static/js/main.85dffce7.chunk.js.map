{"version":3,"sources":["yams/components/YamsGameTableComponent.tsx","utils.tsx","yams/YamsPage.tsx","homepage/Homepage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["updatePlayerTotalScore","totalTdId","player","targetHTMLElementId","value","score","combinaisons","forEach","combinaison","playerPoints","calculatePlayerScore","document","getElementById","innerHTML","toString","updatePlayerCombinaison","indexCombinaison","inputId","targetInputId","parseInt","getPlayerCombinaisonsRows","players","combinaisonsLength","map","indexPlayer","id","type","placeholder","onChange","getTableRows","length","name","pointsText","YamsGameTableComponent","props","className","index","YamsComponent","playersDefault","useState","setPlayers","onClick","prompt","push","addPlayer","Homepage","path","text","route","to","App","exact","component","YamsPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","refreshing","state","controller","console","log","postMessage","addEventListener","reload","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"yPA0BA,SAASA,EAAuBC,EAAmBC,GCtB5C,IAAiCC,EAA6BC,EAA7BD,EDuBdF,ECvB2CG,EDSrE,SAA8BF,GAC5B,IAAIG,EAAQ,EAIZ,OAHAH,EAAOI,aAAaC,SAAQ,SAACC,GAC3BH,GAASG,EAAYC,gBAEhBJ,EAS4BK,CAAqBR,GCtBvDS,SAASC,eAAeT,GAAqCU,UAAYT,EAAMU,WDgClF,SAASC,EAAwBb,EAAgBc,EAA0BC,EAAiBhB,GCrCrF,IAAuBiB,EDsC5BhB,EAAOI,aAAaU,GAAkBP,aAAeU,UCtCzBD,EDsCgDD,ECrCpEN,SAASC,eAAeM,GAAoCd,ODqCkB,IACtFJ,EAAuBC,EAAWC,GAmBpC,SAASkB,EAA0BC,EAAmBC,EAA4BN,GAChF,OAAOK,EAAQE,KAAI,SAACrB,EAAQsB,GAC1B,IAAMP,EAAU,QAAUD,EAAmBQ,EACvCvB,EAAY,QAAUuB,EAE5B,OAAIR,IAAqBM,EAAqB,EAE1C,oBAAIG,GAAIxB,EAAR,SACGC,EAAOG,OADcmB,GAO1B,6BACE,uBACEC,GAAIR,EACJS,KAAK,SACLC,YAAazB,EAAOI,aAAaU,GAAkBP,aAAaK,WAChEc,SAAU,kBAAMb,EAAwBb,EAAQc,EAAkBC,EAAShB,OALtEuB,MAiBf,SAASK,EAAavB,EAA6Be,GACjD,IAAMC,EAAqBhB,EAAawB,OAExC,OAAOxB,EAAaiB,KAAI,SAACf,EAAaQ,GACpC,OACE,+BACE,+BACGR,EAAYuB,KADf,KACuBvB,EAAYwB,WADnC,OAGCZ,EAA0BC,EAASC,EAAoBN,KAJjDA,MAUA,SAASiB,EAAuBC,GAC7C,OACE,wBAAOC,UAAU,uBAAjB,UACE,gCACE,+BACE,wBA/DmBd,EAgEEa,EAAMb,QA/D5BA,EAAQE,KAAI,SAACrB,EAAQkC,GAC1B,OAAO,6BAAiBlC,EAAO6B,MAAfK,YAiEd,gCAAQP,EAAaK,EAAM5B,aAAc4B,EAAMb,cAnErD,IAA6BA,EEed,SAASgB,IACtB,IAAM/B,EAtDC,CACL,CAAEyB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,SAAUC,WAAY,QAASvB,aAAc,GACrD,CAAEsB,KAAM,WAASC,WAAY,QAASvB,aAAc,GACpD,CAAEsB,KAAM,aAAcC,WAAY,KAAMvB,aAAc,GACtD,CAAEsB,KAAM,eAAgBC,WAAY,KAAMvB,aAAc,GACxD,CAAEsB,KAAM,eAAgBC,WAAY,KAAMvB,aAAc,GACxD,CAAEsB,KAAM,OAAQC,WAAY,KAAMvB,aAAc,GAChD,CAAEsB,KAAM,SAAUC,WAAY,QAASvB,aAAc,GACrD,CAAEsB,KAAM,QAASC,WAAY,GAAIvB,aAAc,IA0C3C6B,EANF,GAGkC,EAIVC,mBAASD,GAJC,mBAIjCjB,EAJiC,KAIxBmB,EAJwB,KAMtC,OACE,qCACE,qBAAKL,UAAU,MAAf,SACE,wBAAQA,UAAU,eAAeM,QAAS,kBAAMD,EAxCxD,SAAmBnB,GACjB,IACMnB,EAAS,CACb6B,KAFiBW,OAAO,kBAAoBrB,EAAQS,OAAS,KAEzC,WAAaT,EAAQS,OAAS,GAClDzB,MAAO,EACPC,aA3BK,CACL,CAAEyB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,IAAKC,WAAY,aAAcvB,aAAc,GACrD,CAAEsB,KAAM,SAAUC,WAAY,QAASvB,aAAc,GACrD,CAAEsB,KAAM,WAASC,WAAY,QAASvB,aAAc,GACpD,CAAEsB,KAAM,aAAcC,WAAY,KAAMvB,aAAc,GACtD,CAAEsB,KAAM,eAAgBC,WAAY,KAAMvB,aAAc,GACxD,CAAEsB,KAAM,eAAgBC,WAAY,KAAMvB,aAAc,GACxD,CAAEsB,KAAM,OAAQC,WAAY,KAAMvB,aAAc,GAChD,CAAEsB,KAAM,SAAUC,WAAY,QAASvB,aAAc,GACrD,CAAEsB,KAAM,QAASC,WAAY,GAAIvB,aAAc,KAgBjD,OADAY,EAAQsB,KAAKzC,GACN,YAAImB,GAgCsDuB,CAAUvB,KAArE,0BAIF,cAACY,EAAD,CAAwBZ,QAASA,EAASf,aAAcA,O,YCjE/C,SAASuC,IAKtB,OACE,mCAL8B,CAC9B,CAACC,KAAM,QAASC,KAAM,SAMXxB,KAAI,SAACyB,EAAOZ,GACjB,OACE,cAAC,IAAD,CAEEa,GAAID,EAAMF,KACVX,UAAU,sBAHZ,SAKKa,EAAMD,MAJJX,QCDJc,MAXf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOJ,KAAK,IAAIK,OAAK,EAACC,UAAWP,IACjC,cAAC,IAAD,CAAOC,KAAK,QAAQK,OAAK,EAACC,UAAWC,UCDvCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WAa3B,IAAIC,EAZuB,cAA3BH,EAAiBI,QACfV,UAAUC,cAAcU,YAI1BC,QAAQC,IACN,+GAIFP,EAAiBQ,YAAY,eAG7Bd,UAAUC,cAAcc,iBAAiB,sBACzC,WACIH,QAAQC,IAAI,iBACRJ,IACJA,GAAa,EACbhB,OAAOC,SAASsB,aAKhBjB,GAAUA,EAAOkB,UACnBlB,EAAOkB,SAASb,KAMlBQ,QAAQC,IAAI,sCAGRd,GAAUA,EAAOmB,WACnBnB,EAAOmB,UAAUd,WAO5Be,OAAM,SAACC,GACNR,QAAQQ,MAAM,4CAA6CA,MC7GjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnF,SAASC,eAAe,SFcnB,SAAkBkD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgC,IAAIC,IAAwBxC,OAAOC,SAASwC,MACpDC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAOsB,iBAAiB,QAAQ,WAC9B,IAAMjB,EAAK,UAAMmC,IAAN,sBAEP1C,IA4EV,SAAiCO,EAAeC,GAE9CqC,MAAMtC,EAAO,CACXuC,QAAS,CAAE,iBAAkB,YAE5BlC,MAAK,SAACmC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1C,UAAUC,cAAc0C,MAAMxC,MAAK,SAACC,GAClCA,EAAawC,aAAazC,MAAK,WAC7BV,OAAOC,SAASsB,eAKpBnB,EAAgBC,EAAOC,MAG1BoB,OAAM,WACLP,QAAQC,IAAI,oEAlGVgC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAc0C,MAAMxC,MAAK,WACjCS,QAAQC,IACN,+GAMJhB,EAAgBC,EAAOC,OEpC/B+C,GAKAzB,M","file":"static/js/main.85dffce7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { getInputValue, setHTMLElementInnerHtml } from \"../../utils\";\r\nimport { Combinaison, Player } from \"../YamsTypes\";\r\n\r\ninterface props {\r\n  players: Player[];\r\n  combinaisons: Combinaison[];\r\n}\r\n\r\n/**\r\n * Calculate player score based on combinaisons player points\r\n * @param player Player\r\n */\r\nfunction calculatePlayerScore(player: Player) {\r\n  let score = 0;\r\n  player.combinaisons.forEach((combinaison) => {\r\n    score += combinaison.playerPoints;\r\n  });\r\n  return score;\r\n}\r\n\r\n/**\r\n * Update total score of a player shown in <td>\r\n * @param totalTdId string\r\n * @param player Player\r\n */\r\nfunction updatePlayerTotalScore(totalTdId: string, player: Player) {\r\n  setHTMLElementInnerHtml(totalTdId, calculatePlayerScore(player));\r\n}\r\n\r\n/**\r\n * Update a player combinaison score\r\n * @param player Player\r\n * @param indexCombinaison number\r\n * @param inputId string\r\n * @param totalTdId string\r\n */\r\nfunction updatePlayerCombinaison(player: Player, indexCombinaison: number, inputId: string, totalTdId: string) {\r\n  player.combinaisons[indexCombinaison].playerPoints = parseInt(getInputValue(inputId), 10);\r\n  updatePlayerTotalScore(totalTdId, player);\r\n}\r\n\r\n/**\r\n * Draw <th> with players' names in DOM\r\n * @param players Player[]\r\n */\r\nfunction getThForPlayerNames(players: Player[]) {\r\n  return players.map((player, index) => {\r\n    return <th key={index}>{player.name}</th>;\r\n  });\r\n}\r\n\r\n/**\r\n * Draw <td> for each combinaison for each player\r\n * @param players Player[]\r\n * @param combinaisonsLength number\r\n * @param indexCombinaison number\r\n */\r\nfunction getPlayerCombinaisonsRows(players: Player[], combinaisonsLength: number, indexCombinaison: number) {\r\n  return players.map((player, indexPlayer) => {\r\n    const inputId = \"input\" + indexCombinaison + indexPlayer;\r\n    const totalTdId = \"total\" + indexPlayer;\r\n\r\n    if (indexCombinaison === combinaisonsLength - 1) {\r\n      return (\r\n        <td id={totalTdId} key={indexPlayer}>\r\n          {player.score}\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <td key={indexPlayer}>\r\n        <input\r\n          id={inputId}\r\n          type=\"number\"\r\n          placeholder={player.combinaisons[indexCombinaison].playerPoints.toString()}\r\n          onChange={() => updatePlayerCombinaison(player, indexCombinaison, inputId, totalTdId)}\r\n        />\r\n      </td>\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Draw <tr> for each combinaison for each player\r\n * @param combinaisons Combinaison[]\r\n * @param players Player[]\r\n */\r\nfunction getTableRows(combinaisons: Combinaison[], players: Player[]) {\r\n  const combinaisonsLength = combinaisons.length;\r\n\r\n  return combinaisons.map((combinaison, indexCombinaison) => {\r\n    return (\r\n      <tr key={indexCombinaison}>\r\n        <td>\r\n          {combinaison.name} [{combinaison.pointsText}]\r\n        </td>\r\n        {getPlayerCombinaisonsRows(players, combinaisonsLength, indexCombinaison)}\r\n      </tr>\r\n    );\r\n  });\r\n}\r\n\r\nexport default function YamsGameTableComponent(props: props) {\r\n  return (\r\n    <table className=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          {getThForPlayerNames(props.players)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>{getTableRows(props.combinaisons, props.players)}</tbody>\r\n    </table>\r\n  );\r\n}\r\n","export function getInputValue(targetInputId: string) {\r\n  return (document.getElementById(targetInputId) as HTMLInputElement).value;\r\n}\r\n\r\nexport function setHTMLElementInnerHtml(targetHTMLElementId: string, value: number) {\r\n  (document.getElementById(targetHTMLElementId) as HTMLElement).innerHTML = value.toString();\r\n}\r\n","import React, { useState } from \"react\";\r\nimport YamsGameTableComponent from \"./components/YamsGameTableComponent\";\r\nimport { Combinaison, Player } from \"./YamsTypes\";\r\n\r\n/**\r\n * Get combinaison array\r\n */\r\nfunction getCombinaisons() {\r\n  return [\r\n    { name: \"1\", pointsText: \"Total de 1\", playerPoints: 0 },\r\n    { name: \"2\", pointsText: \"Total de 2\", playerPoints: 0 },\r\n    { name: \"3\", pointsText: \"Total de 3\", playerPoints: 0 },\r\n    { name: \"4\", pointsText: \"Total de 4\", playerPoints: 0 },\r\n    { name: \"5\", pointsText: \"Total de 5\", playerPoints: 0 },\r\n    { name: \"6\", pointsText: \"Total de 6\", playerPoints: 0 },\r\n    { name: \"Brelan\", pointsText: \"Total\", playerPoints: 0 },\r\n    { name: \"Carré\", pointsText: \"Total\", playerPoints: 0 },\r\n    { name: \"Full house\", pointsText: \"25\", playerPoints: 0 },\r\n    { name: \"Petite suite\", pointsText: \"30\", playerPoints: 0 },\r\n    { name: \"Grande suite\", pointsText: \"40\", playerPoints: 0 },\r\n    { name: \"Yams\", pointsText: \"50\", playerPoints: 0 },\r\n    { name: \"Chance\", pointsText: \"Total\", playerPoints: 0 },\r\n    { name: \"Total\", pointsText: \"\", playerPoints: 0 },\r\n  ];\r\n}\r\n\r\n/**\r\n * Add a palyer to players' array\r\n * @param players Player[]\r\n */\r\nfunction addPlayer(players: Player[]) {\r\n  const playerName = prompt(\"Nom du joueur \" + (players.length + 1));\r\n  const player = {\r\n    name: playerName || \"Joueur \" + (players.length + 1),\r\n    score: 0,\r\n    combinaisons: getCombinaisons(),\r\n  };\r\n  players.push(player);\r\n  return [...players];\r\n}\r\n\r\n/**\r\n * Create 2 players by default in dev env\r\n */\r\nfunction getPlayers(getCombinaisons: () => Combinaison[]) {\r\n  return process.env.NODE_ENV === \"development\"\r\n    ? [\r\n        {\r\n          name: \"Joueur 1\",\r\n          score: 0,\r\n          combinaisons: getCombinaisons(),\r\n        },\r\n        {\r\n          name: \"Joueur 2\",\r\n          score: 0,\r\n          combinaisons: getCombinaisons(),\r\n        },\r\n      ]\r\n    : [];\r\n}\r\n\r\nexport default function YamsComponent() {\r\n  const combinaisons = getCombinaisons(); // HTML Table 'draw'\r\n\r\n  const playersDefault: Player[] = getPlayers(getCombinaisons);\r\n  let [players, setPlayers] = useState(playersDefault);\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"nav\">\r\n        <button className=\"btn btn-info\" onClick={() => setPlayers(addPlayer(players))}>\r\n          Add Player\r\n        </button>\r\n      </nav>\r\n      <YamsGameTableComponent players={players} combinaisons={combinaisons} />\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype LinkRouteType = {\r\n  path: string;\r\n  text: string;\r\n}\r\n\r\n\r\nexport default function Homepage() {\r\n  const routes: LinkRouteType[] = [\r\n    {path: '/yams', text: 'Yams'},\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      {\r\n        routes.map((route, index) => {\r\n          return (\r\n            <Link\r\n              key={index}\r\n              to={route.path}\r\n              className=\"col btn btn-success\"\r\n              >\r\n                {route.text}\r\n            </Link>\r\n          );\r\n        })\r\n      }\r\n    </>\r\n  )\r\n}","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport YamsPage from \"./yams/YamsPage\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Homepage from \"./homepage/Homepage\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Homepage} />\n        <Route path=\"/yams\" exact component={YamsPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              installingWorker.postMessage('skipWaiting');\n              // reload once when the new Service Worker starts activating\n              var refreshing: boolean;\n              navigator.serviceWorker.addEventListener('oncontrollerchange',\n              function () {\n                  console.log('Refreshing...')\n                  if (refreshing) return;\n                  refreshing = true;\n                  window.location.reload();\n                }\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}